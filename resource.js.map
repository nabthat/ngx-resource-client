{"version":3,"file":"resource.js","sourceRoot":"","sources":["../src/resource.ts"],"names":[],"mappings":"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","sourcesContent":["import { Core } from './core';\nimport { Service } from './service';\nimport { Base } from './services/base';\nimport { PathBuilder } from './services/path-builder';\nimport { Converter } from './services/converter';\nimport { IDataObject } from './interfaces/data-object';\nimport { IResourcesByType } from './interfaces/resources-by-type';\nimport { IAttributes, IParamsResource, ILinks } from './interfaces';\nimport { DocumentCollection } from './document-collection';\nimport { DocumentResource } from './document-resource';\nimport { ICacheable } from './interfaces/cacheable';\nimport { isArray } from 'util';\nimport { Observable, Subject, of } from 'rxjs';\nimport { ResourceRelationshipsConverter } from './services/resource-relationships-converter';\nimport { IRelationships } from './interfaces/relationship';\n\nexport class Resource implements ICacheable {\n    public id: string = '';\n    public type: string = '';\n    public attributes: IAttributes = {};\n    public relationships: IRelationships = {};\n    public relationships_definitions: IRelationships = undefined;\n    public links: ILinks = {};\n\n    public is_new = true;\n    public is_saving = false;\n    public is_loading = false;\n    public source: 'new' | 'store' = 'new';\n    public cache_last_update = 0;\n    public lastupdate: number;\n    public data_resource: IDataObject;\n\n    public reset(): void {\n        this.id = '';\n        this.attributes = {};\n        this.is_new = true;\n\n        for (const key in this.relationships) {\n            this.relationships[key] =\n                this.relationships[key] instanceof DocumentCollection ? new DocumentCollection() : new DocumentResource();\n        }\n    }\n\n    public toObject(params?: IParamsResource): IDataObject {\n        params = { ...{}, ...Base.ParamsResource, ...params };\n\n        let relationships = {};\n        let included = [];\n        let included_ids = []; // just for control don't repeat any resource\n\n        // REALTIONSHIPS\n        for (const relation_alias in this.relationships) {\n            let relationship = this.relationships[relation_alias];\n            if (relationship instanceof DocumentCollection) {\n                // @TODO PABLO: definir cuál va a ser la propiedd indispensable para guardar la relación\n                if (!relationship.builded && (!relationship.data || relationship.data.length === 0)) {\n                    delete relationships[relation_alias];\n                } else {\n                    relationships[relation_alias] = { data: [] };\n                }\n\n                for (const resource of relationship.data) {\n                    let reational_object = {\n                        id: resource.id,\n                        type: resource.type\n                    };\n                    relationships[relation_alias].data.push(reational_object);\n\n                    // no se agregó aún a included && se ha pedido incluir con el parms.include\n                    let temporal_id = resource.type + '_' + resource.id;\n                    if (included_ids.indexOf(temporal_id) === -1 && params.include.indexOf(relation_alias) !== -1) {\n                        included_ids.push(temporal_id);\n                        included.push(resource.toObject({}).data);\n                    }\n                }\n            } else {\n                // @TODO PABLO: agregué el check de null porque sino fallan las demás condiciones, además es para eliminar la relacxión del back\n                if (relationship.data === null) {\n                    relationships[relation_alias] = { data: null };\n                    continue;\n                }\n                if (!(relationship instanceof DocumentResource)) {\n                    console.warn(relationship, ' is not DocumentCollection or DocumentResource');\n                }\n\n                let relationship_data = <Resource>relationship.data;\n                if (!('id' in relationship.data) && Object.keys(relationship.data).length > 0) {\n                    console.warn(relation_alias + ' defined with hasMany:false, but I have a collection');\n                }\n\n                if (relationship_data.id && relationship_data.type) {\n                    relationships[relation_alias] = {\n                        data: {\n                            id: relationship_data.id,\n                            type: relationship_data.type\n                        }\n                    };\n                    // @TODO PABLO: definir cuál va a ser la propiedd indispensable para guardar la relación\n                    // @WARNING: no borrar la verificación de que no sea null... sino no se van a poder borrar\n                } else if (!relationship.builded && !relationship_data.id && !relationship_data.type) {\n                    delete relationships[relation_alias];\n                }\n\n                // no se agregó aún a included && se ha pedido incluir con el parms.include\n                let temporal_id = relationship_data.type + '_' + relationship_data.id;\n                if (included_ids.indexOf(temporal_id) === -1 && params.include.indexOf(relation_alias) !== -1) {\n                    included_ids.push(temporal_id);\n                    included.push(relationship_data.toObject({}).data);\n                }\n            }\n        }\n\n        // just for performance dont copy if not necessary\n        let attributes;\n        if (this.getService() && this.getService().parseToServer) {\n            attributes = { ...{}, ...this.attributes };\n            this.getService().parseToServer(attributes);\n        } else {\n            attributes = this.attributes;\n        }\n\n        let ret: IDataObject = {\n            data: {\n                type: this.type,\n                id: this.id,\n                attributes: attributes,\n                relationships: relationships\n            },\n            builded: false,\n            content: 'resource'\n        };\n\n        if (included.length > 0) {\n            ret.included = included;\n        }\n\n        return ret;\n    }\n\n    public fill(data_object: IDataObject, included_resources?: IResourcesByType): void {\n        \n        included_resources = included_resources || Converter.buildIncluded(data_object);\n\n        this.id = data_object.data.id || '';\n        this.attributes = data_object.data.attributes || this.attributes;\n        this.data_resource = data_object;\n\n        this.is_new = false;\n        let service = Converter.getService(data_object.data.type);\n\n        // wee need a registered service\n        if (!service) {\n            return;\n        }\n\n        // only ids?\n        if (Object.keys(this.attributes).length) {\n            Converter.getService(this.type).parseFromServer(this.attributes);\n        }\n\n        if (this.relationships_definitions) {\n          data_object.data.relationships = this.relationships;\n          this.relationships = this.relationships_definitions;\n        }\n\n        new ResourceRelationshipsConverter(\n            Converter.getService,\n            data_object.data.relationships || {},\n            this.relationships,\n            included_resources\n        ).buildRelationships();\n    }\n\n    public addRelationship<T extends Resource>(resource: T, type_alias?: string) {\n        let relation = this.relationships[type_alias || resource.type];\n        if (relation instanceof DocumentCollection) {\n            relation.replaceOrAdd(resource);\n        } else {\n            relation.data = resource;\n        }\n    }\n\n    public addRelationships<R extends Resource>(resources: Array<R>, type_alias: string): void {\n        if (resources.length === 0) {\n            return;\n        }\n\n        let relation = this.relationships[type_alias];\n        if (!(relation instanceof DocumentCollection)) {\n            throw new Error('addRelationships require a DocumentCollection (hasMany) relation.');\n        }\n\n        resources.forEach((resource: Resource) => {\n            this.addRelationship(resource, type_alias);\n        });\n    }\n\n    /**\n     * @deprecated\n     */\n    public addRelationshipsArray<R extends Resource>(resources: Array<R>, type_alias: string): void {\n        this.addRelationships(resources, type_alias);\n    }\n\n    public removeRelationship(type_alias: string, id: string): boolean {\n        if (!(type_alias in this.relationships)) {\n            return false;\n        }\n        if (!('data' in this.relationships[type_alias])) {\n            return false;\n        }\n\n        let relation = this.relationships[type_alias];\n        if (relation instanceof DocumentCollection) {\n            relation.data = relation.data.filter(resource => resource.id !== id);\n        } else {\n            relation.data.reset();\n        }\n\n        return true;\n    }\n\n    public hasManyRelated(resource: string): boolean {\n        return this.relationships[resource] && (<Array<Resource>>this.relationships[resource].data).length > 0;\n    }\n\n    public hasOneRelated(resource: string): boolean {\n        return (\n            this.relationships[resource] &&\n            (<Resource>this.relationships[resource].data).type &&\n            (<Resource>this.relationships[resource].data).type !== ''\n        );\n    }\n\n    /*\n    @return This resource like a service\n    */\n    public getService(): Service {\n        return Converter.getService(this.type);\n    }\n\n    public save<T extends Resource>(params?: IParamsResource): Observable<object> {\n        params = { ...Base.ParamsResource, ...params };\n        if (this.is_saving || this.is_loading) {\n            return of({});\n        }\n        this.is_saving = true;\n\n        let subject = new Subject<object>();\n        let object = this.toObject(params);\n        if (this.id === '') {\n            delete object.data.id;\n        }\n\n        // http request\n        let path = new PathBuilder();\n        path.applyParams(this.getService(), params);\n        if (this.id) {\n            path.appendPath(this.id);\n        }\n\n        Core.exec(path.get(), this.id ? 'PATCH' : 'POST', object, true).subscribe(\n            success => {\n                this.is_saving = false;\n\n                // foce reload cache (for example, we add a new element)\n                if (!this.id) {\n                    this.getService().cachememory.deprecateCollections(path.get());\n                    this.getService().cachestore.deprecateCollections(path.get());\n                }\n\n                // is a resource?\n                if ('id' in success.data) {\n                    this.id = success.data.id;\n                    this.fill(<IDataObject>success);\n                } else if (isArray(success.data)) {\n                    console.warn('Server return a collection when we save()', success.data);\n                }\n\n                subject.next(success);\n                subject.complete();\n            },\n            error => {\n                this.is_saving = false;\n                subject.error('data' in error ? error.data : error);\n            }\n        );\n\n        return subject;\n    }\n}\n"]}