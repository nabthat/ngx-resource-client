{"version":3,"file":"store.service.js","sourceRoot":"","sources":["../../src/sources/store.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICacheableDataCollection } from './../interfaces/data-collection';\nimport { ICacheableDataResource } from './../interfaces/data-resource';\nimport Dexie from 'dexie';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { IObjectsById } from '../interfaces';\nimport { Injectable } from '@angular/core';\n\ninterface IStoreElement {\n    time: number;\n}\n@Injectable()\nexport class StoreService /* implements IStoreService */ {\n    private db: Dexie;\n\n    public constructor() {\n        this.db = new Dexie('jsonapi_db');\n        this.db.version(1).stores({\n            collections: '',\n            elements: ''\n        });\n        this.checkIfIsTimeToClean();\n    }\n\n    public async getDataObject(type: 'collection', url: string): Promise<ICacheableDataCollection>;\n    public async getDataObject(type: string, id: string): Promise<ICacheableDataResource>;\n    public async getDataObject(type: 'collection' | string, id_or_url: string): Promise<ICacheableDataCollection | ICacheableDataResource> {\n        // we use different tables for resources and collections\n        const table_name = type === 'collection' ? 'collections' : 'elements';\n\n        await this.db.open();\n        let item = await this.db.table(table_name).get(type + '.' + id_or_url);\n        if (item === undefined) {\n            throw new Error();\n        }\n\n        return item;\n    }\n\n    public async getDataResources(keys: Array<string>): Promise<IObjectsById<ICacheableDataResource>> {\n        const collection = this.db\n            .table('elements')\n            .where(':id')\n            .anyOf(keys);\n\n        let resources_by_id = {};\n        await collection.each(item => {\n            resources_by_id[item.id] = item;\n        });\n\n        return resources_by_id;\n    }\n\n    public saveResource(type: string, url_or_id: string, value: IDataResource): void {\n        let data_resource_storage: ICacheableDataResource = { ...{ cache_last_update: Date.now() }, ...value };\n        this.db.open().then(async () => {\n            return this.db.table('elements').put(data_resource_storage, type + '.' + url_or_id);\n        });\n    }\n\n    public saveCollection(url_or_id: string, value: ICacheableDataCollection): void {\n        let data_collection_storage: ICacheableDataCollection = { ...{ cache_last_update: Date.now() }, ...value };\n        this.db.open().then(async () => {\n            return this.db.table('collections').put(data_collection_storage, 'collection.' + url_or_id);\n        });\n    }\n\n    public clearCache() {\n        this.db.open().then(async () => {\n            return this.db\n                .table('elements')\n                .toCollection()\n                .delete();\n        });\n        this.db.open().then(async () => {\n            return this.db\n                .table('collections')\n                .toCollection()\n                .delete();\n        });\n    }\n\n    public deprecateResource(type: string, id: string) {\n        this.db.open().then(async () => {\n            return this.db\n                .table('elements')\n                .where(':id')\n                .startsWith(type + '.' + id)\n                .modify({ cache_last_update: 0 });\n        });\n    }\n\n    public deprecateCollection(key_start_with: string) {\n        this.db.open().then(async () => {\n            return this.db\n                .table('collections')\n                .where(':id')\n                .startsWith(key_start_with)\n                .modify({ cache_last_update: 0 });\n        });\n    }\n\n    public async removeObjectsWithKey(key: string) {\n        /*\n        this.allstore.removeItem(key);\n        await this.allstore.getItems().then(async result => {\n            for (let saved_resource_key in result) {\n                let resource_id_split = key.split('.');\n                let resource_id = resource_id_split[resource_id_split.length - 1];\n                if (\n                    Array.isArray(result[saved_resource_key].data) &&\n                    result[saved_resource_key].data.find(resource => resource.id === resource_id)\n                ) {\n                    result[saved_resource_key].data.splice(\n                        result[saved_resource_key].data.findIndex(resource => resource.id === resource_id),\n                        1\n                    );\n                    await this.allstore.setItem(saved_resource_key, result[saved_resource_key]);\n                }\n            }\n        });\n        */\n    }\n\n    private checkIfIsTimeToClean() {\n        // check if is time to check cachestore\n        /*\n        this.globalstore\n            .getItem('_lastclean_time')\n            .then((success: IStoreElement) => {\n                if (Date.now() >= success.time + 12 * 3600 * 1000) {\n                    // is time to check cachestore!\n                    this.globalstore.setItem('_lastclean_time', {\n                        time: Date.now()\n                    });\n                    this.checkAndDeleteOldElements();\n                }\n            })\n            .catch(() => {\n                this.globalstore.setItem('_lastclean_time', {\n                    time: Date.now()\n                });\n            });\n        */\n    }\n\n    private checkAndDeleteOldElements() {\n        /*\n        this.allstore\n            .keys()\n            .then(success => {\n                Base.forEach(success, key => {\n                    // recorremos cada item y vemos si es tiempo de removerlo\n                    this.allstore\n                        .getItem(key)\n                        .then((success2: ICacheableDataCollection | ICacheableDataResource) => {\n                            if (Date.now() >= success2.cache_last_update + 24 * 3600 * 1000) {\n                                this.allstore.removeItem(key);\n                            }\n                        })\n                        .catch(noop);\n                });\n            })\n            .catch(noop);\n        */\n    }\n}\n"]}