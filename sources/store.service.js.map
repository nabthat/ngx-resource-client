{"version":3,"file":"store.service.js","sourceRoot":"","sources":["../../src/sources/store.service.ts"],"names":[],"mappings":"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","sourcesContent":["// import 'localforage-getitems';\nimport * as localForage from 'localforage';\nimport { extendPrototype as extendGetitems } from 'localforage-getitems';\nimport { Base } from '../services/base';\nimport { noop, Subject, Observable } from 'rxjs';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { IObjectsById } from '../interfaces';\n\nextendGetitems(localForage);\n\ninterface IStoreElement {\n    time: number;\n}\n\ninterface IDataResourceStorage extends IDataResource {\n    _lastupdate_time: number;\n}\n\ninterface IDataCollectionStorage extends IDataCollection {\n    _lastupdate_time: number;\n}\n\nexport class StoreService /* implements IStoreService */ {\n    private globalstore: LocalForage;\n    private allstore: LocalForage;\n\n    public constructor() {\n      if (false) {\n        this.globalstore = localForage.createInstance({\n            name: 'jsonapiglobal'\n        });\n        this.allstore = localForage.createInstance({ name: 'allstore' });\n      }\n      if (this.globalstore) this.checkIfIsTimeToClean();\n    }\n\n    public getDataObject(type: 'collection', url: string): Observable<IDataCollection>;\n    public getDataObject(type: string, id: string): Observable<IDataResource>;\n    public getDataObject(type: 'collection' | string, id_or_url: string): Observable<IDataCollection | IDataResource> {\n        let subject = new Subject<IDataResource | IDataCollection>();\n\n        this.allstore\n            .getItem<IDataResource | IDataCollection>('jsonapi.' + type + '.' + id_or_url)\n            .then(success => {\n                if (success === null) {\n                    subject.error(null);\n                } else {\n                    subject.next(success);\n                }\n                subject.complete();\n            })\n            .catch(error => subject.next(error));\n\n        return subject.asObservable();\n    }\n\n    public async getDataResources(keys: Array<string>): Promise<IObjectsById<IDataResourceStorage>> {\n        return this.allstore.getItems(keys.map(key => 'jsonapi.' + key));\n    }\n\n    public saveResource(type: string, url_or_id: string, value: IDataResource): void {\n        let data_resource_storage: IDataResourceStorage = { ...{ _lastupdate_time: Date.now() }, ...value };\n        this.allstore.setItem('jsonapi.' + type + '.' + url_or_id, data_resource_storage);\n    }\n\n    public saveCollection(url_or_id: string, value: IDataCollection): void {\n        let data_collection_storage: IDataCollectionStorage = { ...{ _lastupdate_time: Date.now() }, ...value };\n        this.allstore.setItem('jsonapi.collection.' + url_or_id, data_collection_storage);\n    }\n\n    public clearCache() {\n        this.allstore.clear();\n        this.globalstore.clear();\n    }\n\n    public deprecateObjectsWithKey(key_start_with: string) {\n        this.allstore\n            .keys()\n            .then(success => {\n                Base.forEach(success, (key: string) => {\n                    if (key.startsWith(key_start_with)) {\n                        // key of stored object starts with key_start_with\n                        this.allstore\n                            .getItem(key)\n                            .then((success2: IDataCollectionStorage | IDataResourceStorage) => {\n                                success2._lastupdate_time = 0;\n                                this.allstore.setItem(key, success2);\n                            })\n                            .catch(noop);\n                    }\n                });\n            })\n            .catch(noop);\n    }\n\n    private checkIfIsTimeToClean() {\n        // check if is time to check cachestore\n        this.globalstore\n            .getItem('_lastclean_time')\n            .then((success: IStoreElement) => {\n                if (Date.now() >= success.time + 12 * 3600 * 1000) {\n                    // is time to check cachestore!\n                    this.globalstore.setItem('_lastclean_time', {\n                        time: Date.now()\n                    });\n                    this.checkAndDeleteOldElements();\n                }\n            })\n            .catch(() => {\n                this.globalstore.setItem('_lastclean_time', {\n                    time: Date.now()\n                });\n            });\n    }\n\n    private checkAndDeleteOldElements() {\n        this.allstore\n            .keys()\n            .then(success => {\n                Base.forEach(success, key => {\n                    // recorremos cada item y vemos si es tiempo de removerlo\n                    this.allstore\n                        .getItem(key)\n                        .then((success2: IDataCollectionStorage | IDataResourceStorage) => {\n                            if (Date.now() >= success2._lastupdate_time + 24 * 3600 * 1000) {\n                                this.allstore.removeItem(key);\n                            }\n                        })\n                        .catch(noop);\n                });\n            })\n            .catch(noop);\n    }\n}\n"]}