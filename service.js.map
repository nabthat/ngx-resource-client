{"version":3,"file":"service.js","sourceRoot":"","sources":["../src/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Core } from './core';\nimport { Base } from './services/base';\nimport { Resource } from './resource';\nimport { PathBuilder } from './services/path-builder';\nimport { Converter } from './services/converter';\nimport { CacheMemory } from './services/cachememory';\nimport { CacheStore } from './services/cachestore';\nimport { IParamsCollection, IParamsResource, IAttributes } from './interfaces';\nimport { DocumentCollection } from './document-collection';\nimport { isLive } from './common';\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\nimport { IDataObject } from './interfaces/data-object';\nimport { PathCollectionBuilder } from './services/path-collection-builder';\nimport { IDataCollection } from './interfaces/data-collection';\n\nexport class Service<R extends Resource = Resource> {\n    public cachememory: CacheMemory;\n    public cachestore: CacheStore;\n    public type: string;\n    public resource = Resource;\n    protected path: string; // without slashes\n    public apiBaseUrl: string;\n\n    /*\n    Register service on Core\n    @return true if the resource don't exist and registered ok\n    */\n    public register(): Service<R> | false {\n        if (Core.me === null) {\n            throw new Error('Error: you are trying register `' + this.type + '` before inject JsonapiCore somewhere, almost one time.');\n        }\n        // only when service is registered, not cloned object\n        this.cachememory = new CacheMemory();\n        this.cachestore = new CacheStore();\n\n        return Core.me.registerService<R>(this);\n    }\n\n    public newResource(): R {\n        let resource = new this.resource();\n\n        return <R>resource;\n    }\n\n    public newCollection(): DocumentCollection<R> {\n        return new DocumentCollection();\n    }\n\n    public new(): R {\n        let resource = this.newResource();\n        resource.type = this.type;\n        // issue #36: just if service is not registered yet.\n        this.getService();\n        resource.reset();\n\n        return resource;\n    }\n\n    public getPrePath(): string {\n        return '';\n    }\n\n    public getPath(): string {\n        return this.path || this.type;\n    }\n\n    public pathForGet(id: string, params: IParamsResource = {}) {\n      params = { ...Base.ParamsResource, ...params };\n\n      let path = new PathBuilder();\n      path.applyParams(this, params);\n      path.appendPath(id);\n      path.setApiBaseUrl(this.apiBaseUrl);\n\n      return path.get();\n    }\n\n    public get(id: string, params: IParamsResource = {}): Observable<R> {\n        params = { ...Base.ParamsResource, ...params };\n\n        // http request\n        let path = new PathBuilder();\n        path.applyParams(this, params);\n        path.appendPath(id);\n        path.setApiBaseUrl(this.apiBaseUrl);\n\n        // CACHEMEMORY\n        let resource = this.getOrCreateResource(id);\n        resource.is_loading = true;\n\n        let subject = new BehaviorSubject<R>(resource);\n\n        if (isLive(resource, params.ttl)) {\n            subject.complete();\n            resource.is_loading = false;\n        } else if (Core.injectedServices.rsJsonapiConfig.cachestore_support) {\n            // CACHESTORE\n            this.getService()\n                .cachestore.getResource(resource, params.include)\n                .then(() => {\n                    if (!isLive(resource, params.ttl)) {\n                        subject.next(resource);\n                        throw new Error('No está viva la caché de localstorage');\n                    }\n                    resource.is_loading = false;\n                    subject.next(resource);\n                    subject.complete();\n                })\n                .catch(() => {\n                    this.getGetFromServer(path, resource, subject);\n                });\n        } else {\n            this.getGetFromServer(path, resource, subject);\n        }\n        subject.next(resource);\n\n        return subject.asObservable();\n    }\n\n    protected getGetFromServer(path, resource: R, subject: Subject<R>): void {\n        Core.get(path.get()).subscribe(\n            success => {\n                resource.fill(<IDataObject>success);\n                resource.is_loading = false;\n                this.getService().cachememory.setResource(resource);\n                if (Core.injectedServices.rsJsonapiConfig.cachestore_support) {\n                    this.getService().cachestore.setResource(resource);\n                }\n                subject.next(resource);\n                subject.complete();\n            },\n            error => {\n                subject.error(error);\n            }\n        );\n    }\n\n    public getService<T extends Service<R>>(): T {\n        return <T>(Converter.getService(this.type) || this.register());\n    }\n\n    public getOrCreateCollection(path: PathCollectionBuilder): DocumentCollection<R> {\n        let collection = <DocumentCollection<R>>this.getService().cachememory.getOrCreateCollection(path.getForCache());\n\n        return collection;\n    }\n\n    public getOrCreateResource(id: string): R {\n        let service = this.getService();\n        if (service.cachememory && id in service.cachememory.resources) {\n            return <R>service.cachememory.resources[id];\n        } else {\n            let resource = service.new();\n            resource.id = id;\n            service.cachememory.setResource(resource, false);\n\n            return <R>resource;\n        }\n    }\n\n    public clearCacheMemory(): boolean {\n        let path = new PathBuilder();\n        path.applyParams(this);\n        path.setApiBaseUrl(this.apiBaseUrl);\n\n        return (\n            this.getService().cachememory.deprecateCollections(path.getForCache()) &&\n            this.getService().cachestore.deprecateCollections(path.getForCache())\n        );\n    }\n\n    public parseToServer(attributes: IAttributes): void {\n        /* */\n    }\n\n    public parseFromServer(attributes: IAttributes): void {\n        /* */\n    }\n\n    public delete(id: string, params?: Object): Observable<void> {\n        params = { ...{}, ...Base.ParamsResource, ...params };\n\n        // http request\n        let path = new PathBuilder();\n        path.applyParams(this, params);\n        path.appendPath(id);\n        path.setApiBaseUrl(this.apiBaseUrl);\n\n        let subject = new Subject<void>();\n\n        Core.delete(path.get()).subscribe(\n            success => {\n                this.getService().cachememory.removeResource(id);\n                subject.next();\n                subject.complete();\n            },\n            error => {\n                subject.error(error);\n            }\n        );\n\n        return subject.asObservable();\n    }\n\n    public pathForAll(params: IParamsCollection = {}, apiBaseUrl: string = '') {\n      params = { ...Base.ParamsCollection, ...params };\n\n      let path = new PathCollectionBuilder();\n      path.applyParams(this, params);\n      path.setApiBaseUrl(this.apiBaseUrl);\n\n      return path.get();\n    }\n\n    public all(params: IParamsCollection = {}): Observable<DocumentCollection<R>> {\n        params = { ...Base.ParamsCollection, ...params };\n\n        let path = new PathCollectionBuilder();\n        path.applyParams(this, params);\n        path.setApiBaseUrl(this.apiBaseUrl);\n\n        // make request\n        let temporary_collection = this.getOrCreateCollection(path);\n        temporary_collection.page.number = params.page.number * 1;\n\n        let subject = new BehaviorSubject<DocumentCollection<R>>(temporary_collection);\n\n        if (isLive(temporary_collection, params.ttl)) {\n            temporary_collection.source = 'memory';\n            subject.next(temporary_collection);\n            setTimeout(() => subject.complete(), 0);\n        } else if (Core.injectedServices.rsJsonapiConfig.cachestore_support) {\n            // STORE\n            temporary_collection.is_loading = true;\n\n            this.getService()\n                .cachestore.fillCollectionFromStore(path.getForCache(), path.includes, temporary_collection)\n                .subscribe(\n                    () => {\n                        temporary_collection.source = 'store';\n\n                        // when load collection from store, we save collection on memory\n                        this.getService().cachememory.setCollection(path.getForCache(), temporary_collection);\n\n                        if (isLive(temporary_collection, params.ttl)) {\n                            temporary_collection.is_loading = false;\n                            subject.next(temporary_collection);\n                            subject.complete();\n                        } else {\n                            this.getAllFromServer(path, params, temporary_collection, subject);\n                        }\n                    },\n                    err => {\n                        this.getAllFromServer(path, params, temporary_collection, subject);\n                    }\n                );\n        } else {\n            this.getAllFromServer(path, params, temporary_collection, subject);\n        }\n\n        return subject.asObservable();\n    }\n\n    protected getAllFromServer(\n        path: PathBuilder,\n        params: IParamsCollection,\n        temporary_collection: DocumentCollection<R>,\n        subject: BehaviorSubject<DocumentCollection<R>>\n    ) {\n        temporary_collection.is_loading = true;\n        subject.next(temporary_collection);\n\n        Core.get(path.get()).subscribe(\n            success => {\n                temporary_collection.source = 'server';\n                temporary_collection.is_loading = false;\n\n                // this create a new ID for every resource (for caching proposes)\n                // for example, two URL return same objects but with different attributes\n                if (params.cachehash) {\n                    for (const key in success.data) {\n                        let resource = success.data[key];\n                        resource.id = resource.id + params.cachehash;\n                    }\n                }\n                temporary_collection.fill(<IDataCollection>success);\n                temporary_collection.cache_last_update = Date.now();\n\n                this.getService().cachememory.setCollection(path.getForCache(), temporary_collection);\n                if (Core.injectedServices.rsJsonapiConfig.cachestore_support) {\n                    this.getService().cachestore.setCollection(path.getForCache(), temporary_collection, params.include);\n                }\n\n                subject.next(temporary_collection);\n                subject.complete();\n            },\n            error => {\n                // do not replace source, because localstorage don't write if = server\n                // temporary_collection.source = 'server';\n                temporary_collection.is_loading = false;\n                subject.next(temporary_collection);\n                subject.error(error);\n            }\n        );\n    }\n}\n"]}