{"version":3,"file":"resource-relationships-converter.js","sourceRoot":"","sources":["../../src/services/resource-relationships-converter.ts"],"names":[],"mappings":"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","sourcesContent":["import { IResourcesByType } from '../interfaces';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { IDataObject } from '../interfaces/data-object';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { Resource } from '../resource';\nimport { DocumentCollection } from '../document-collection';\nimport { IRelationships } from '../interfaces/relationship';\nimport { DocumentResource } from '../document-resource';\nimport { isDevMode } from '@angular/core';\n\nexport class ResourceRelationshipsConverter {\n    private getService: Function;\n    private relationships_from: object;\n    private relationships_dest: IRelationships;\n    private included_resources: IResourcesByType;\n\n    public constructor(\n        getService: Function,\n        relationships_from: object,\n        relationships_dest: IRelationships,\n        included_resources: IResourcesByType\n    ) {\n        this.getService = getService;\n        this.relationships_from = relationships_from;\n        this.relationships_dest = relationships_dest;\n        this.included_resources = included_resources;\n    }\n\n    public buildRelationships(): void {\n        // recorro los relationships levanto el service correspondiente\n        for (const relation_alias in this.relationships_from) {\n            let relation_from_value: IDataCollection & IDataObject = this.relationships_from[relation_alias];\n\n            if (!relation_from_value.data) {\n                continue;\n            }\n\n            if (this.relationships_dest[relation_alias] instanceof DocumentCollection) {\n                this.__buildRelationshipHasMany(relation_from_value, relation_alias);\n            } else if (this.relationships_dest[relation_alias] instanceof DocumentResource) {\n                this.__buildRelationshipHasOne(relation_from_value, relation_alias);\n            } else {\n                // console.warn('Relation', relation_alias, 'dont exists');\n            }\n        }\n    }\n\n    private __buildRelationshipHasMany(relation_from_value: IDataCollection, relation_alias: string) {\n        \n        let relation_type = relation_from_value.data[0] ? relation_from_value.data[0].type : '';\n        if (relation_type === '') {\n            return;\n        }\n\n        relation_alias = relation_alias || relation_type;\n        if (!this.getService(relation_type)) {\n            if (isDevMode()) {\n                console.warn(\n                    'The relationship ' + relation_alias + ' (type',\n                    relation_type,\n                    ') cant be generated because service for this type has not been injected.'\n                );\n            }\n\n            return;\n        }\n\n        if (relation_from_value.data.length === 0) {\n            this.relationships_dest[relation_alias] = new DocumentCollection();\n\n            return;\n        }\n\n        (<DocumentCollection>this.relationships_dest[relation_alias]).fill(relation_from_value, this.included_resources);\n    }\n\n    private __buildRelationshipHasOne(relation_data_from: IDataObject, relation_alias: string): void {\n        // new related resource <> cached related resource <> ? delete!\n        if (!('type' in relation_data_from.data)) {\n            this.relationships_dest[relation_alias].data = [];\n\n            return;\n        }\n\n        if (relation_data_from.data.id !== (<Resource>this.relationships_dest[relation_alias].data).id) {\n            this.relationships_dest[relation_alias].data = new Resource();\n        }\n\n        if ((<Resource>this.relationships_dest[relation_alias].data).id !== relation_data_from.data.id) {\n            let resource_data = this.__buildRelationship(relation_data_from.data, this.included_resources);\n            if (resource_data) {\n                this.relationships_dest[relation_alias].data = resource_data;\n                this.relationships_dest[relation_alias].builded = true;\n            }\n        }\n    }\n\n    private __buildRelationship(resource_data_from: IDataResource, included_array: IResourcesByType): Resource {\n        if (resource_data_from.type in included_array && resource_data_from.id in included_array[resource_data_from.type]) {\n            // it's in included\n            let data = included_array[resource_data_from.type][resource_data_from.id];\n\n            // Store the include in cache\n            this.getService(resource_data_from.type).cachestore.setResource(data);\n\n            return data;\n        } else {\n            // OPTIONAL: return cached Resource\n            let service = this.getService(resource_data_from.type);\n            if (service && resource_data_from.id in service.cachememory.resources) {\n                return service.cachememory.resources[resource_data_from.id];\n            }\n        }\n    }\n}\n"]}