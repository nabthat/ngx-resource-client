{"version":3,"file":"cachememory.js","sourceRoot":"","sources":["../../src/services/cachememory.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base } from './base';\nimport { Resource } from '../resource';\nimport { Converter } from './converter';\nimport { DocumentCollection } from '../document-collection';\nimport { IObjectsById } from '../interfaces';\n\nexport class CacheMemory<R extends Resource = Resource> {\n    public resources: IObjectsById<Resource> = {};\n    private collections: { [url: string]: DocumentCollection<R> } = {};\n    private collections_lastupdate: { [url: string]: number } = {};\n\n    public isCollectionExist(url: string): boolean {\n        return url in this.collections && this.collections[url].source !== 'new' ? true : false;\n    }\n\n    public isCollectionLive(url: string, ttl: number): boolean {\n        return Date.now() <= this.collections_lastupdate[url] + ttl * 1000;\n    }\n\n    public isResourceLive(id: string, ttl: number): boolean {\n        return this.resources[id] && Date.now() <= this.resources[id].lastupdate + ttl * 1000;\n    }\n\n    public getOrCreateCollection(url: string): DocumentCollection<R> {\n        if (!(url in this.collections)) {\n            this.collections[url] = new DocumentCollection();\n            this.collections[url].source = 'new';\n        }\n\n        return this.collections[url];\n    }\n\n    public setCollection(url: string, collection: DocumentCollection<R>): void {\n        // v1: clone collection, because after maybe delete items for localfilter o pagination\n        if (!(url in this.collections)) {\n            this.collections[url] = new DocumentCollection();\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            let resource = collection.data[i];\n            // this.collections[url].data.push(resource);\n            this.setResource(resource);\n        }\n        this.collections[url].data = collection.data;\n        this.collections[url].page = collection.page;\n        this.collections_lastupdate[url] = Date.now();\n    }\n\n    public getOrCreateResource(type: string, id: string): Resource {\n        if (Converter.getService(type).cachememory && id in Converter.getService(type).cachememory.resources) {\n            return Converter.getService(type).cachememory.resources[id];\n        } else {\n            let resource = Converter.getService(type).new();\n            resource.id = id;\n            // needed for a lot of request (all and get, tested on multinexo.com)\n            this.setResource(resource, false);\n\n            return resource;\n        }\n    }\n\n    public setResource(resource: Resource, update_lastupdate = false): void {\n        if (resource.id in this.resources) {\n            this.addResourceOrFill(resource);\n        } else {\n            this.resources[resource.id] = resource;\n        }\n        this.resources[resource.id].lastupdate = update_lastupdate ? Date.now() : 0;\n    }\n\n    public deprecateCollections(path_start_with: string): boolean {\n        Base.forEach(this.collections_lastupdate, (lastupdate: number, key: string) => {\n            this.collections_lastupdate[key] = 0;\n        });\n\n        return true;\n    }\n\n    public removeResource(id: string): void {\n        Base.forEach(this.collections, (value, url) => {\n            delete value[id];\n        });\n        this.resources[id].attributes = {}; // just for confirm deletion on view\n        // this.resources[id].relationships = {}; // just for confirm deletion on view\n        for (let relationship in this.resources[id].relationships) {\n            if (this.resources[id].relationships[relationship].data.constructor === Array) {\n                this.resources[id].relationships[relationship].data = []; // just in case that there is a for loop using it\n            } else if (this.resources[id].relationships[relationship].data.constructor === Object) {\n                delete this.resources[id].relationships[relationship].data;\n            }\n        }\n        delete this.resources[id];\n    }\n\n    private addResourceOrFill(source: Resource): void {\n        let destination = this.resources[source.id];\n\n        destination.attributes = source.attributes;\n\n        // remove relationships on destination resource\n        for (let type_alias in destination.relationships) {\n            // problem with no declared services\n            if (destination.relationships[type_alias].data === undefined) {\n                continue;\n            }\n\n            if (!(type_alias in source.relationships)) {\n                delete destination.relationships[type_alias];\n            } else {\n                // relation is a collection\n                let collection = <DocumentCollection>destination.relationships[type_alias];\n                // TODO: talkto Pablo, this could be and Object... (following IF statement added by Maxi)\n                if (!Array.isArray(collection.data)) {\n                    continue;\n                }\n                for (let resource of collection.data) {\n                    if (collection.find(resource.id) === null) {\n                        delete destination.relationships[type_alias];\n                    }\n                }\n            }\n        }\n\n        // add source relationships to destination\n        for (let type_alias in source.relationships) {\n            // problem with no declared services\n            if (source.relationships[type_alias].data === undefined) {\n                continue;\n            }\n\n            if ('id' in source.relationships[type_alias].data) {\n                destination.addRelationship(<Resource>source.relationships[type_alias].data, type_alias);\n            } else {\n                destination.addRelationships(<Array<Resource>>source.relationships[type_alias].data, type_alias);\n            }\n        }\n    }\n}\n"]}