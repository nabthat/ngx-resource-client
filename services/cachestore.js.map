{"version":3,"file":"cachestore.js","sourceRoot":"","sources":["../../src/services/cachestore.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAc,OAAO,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAE1C,MAAM;;;;;;IACW,WAAW,CAAC,QAAkB,EAAE,UAAyB,EAAE;;;YACpE,IAAI,SAAS,GAAoB,IAAI,OAAO,CACxC,CAAC,OAAO,EAAE,MAAM,EAAQ,EAAE;gBACtB,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CACzF,OAAO,CAAC,EAAE;oBACN,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;;oBAGjC,IAAI,gBAAgB,GAA2B,EAAE,CAAC;oBAClD,KAAK,IAAI,cAAc,IAAI,OAAO,EAAE;wBAChC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;qBAC9E;;;oBAKD,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE;wBAC/B,OAAO,CAAC,OAAO,CAAC,CAAC;qBACpB;yBAAM;;wBAEH,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;6BACxB,IAAI,CAAC,QAAQ,CAAC,EAAE;4BACb,OAAO,CAAC,QAAQ,CAAC,CAAC;yBACrB,CAAC;6BACD,KAAK,CAAC,MAAM,CAAC,EAAE;4BACZ,MAAM,CAAC,MAAM,CAAC,CAAC;yBAClB,CAAC,CAAC;qBACV;iBACJ,EACD,GAAG,EAAE;oBACD,MAAM,EAAE,CAAC;iBACZ,CACJ,CAAC;aACL,CACJ,CAAC;YAEF,OAAO,SAAS,CAAC;;;;;;;IAGd,WAAW,CAAC,QAAkB;QACjC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC;;;;;;;;IAG1G,aAAa,CAAC,GAAW,EAAE,UAA8B,EAAE,OAAsB;;QACpF,IAAI,GAAG,GAAoB,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC;;QAC1D,IAAI,kBAAkB,GAA2B,EAAE,CAAC;QACpD,KAAK,IAAI,QAAQ,IAAI,UAAU,CAAC,IAAI,EAAE;YAClC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC3B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;YAExD,KAAK,IAAI,mBAAmB,IAAI,OAAO,EAAE;gBACrC,IAAI,IAAI,IAAI,QAAQ,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE;;oBAE1D,IAAI,IAAI,qBAAa,QAAQ,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAC;oBACtE,kBAAkB,CAAC,mBAAmB,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;iBAC5D;qBAAM;;oBAEH,IAAI,WAAW,qBAAoB,QAAQ,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAC;oBACpF,KAAK,IAAI,YAAY,IAAI,WAAW,EAAE;wBAClC,kBAAkB,CAAC,mBAAmB,GAAG,YAAY,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;qBAC5E;iBACJ;aACJ;SACJ;QAED,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC3B,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,cAAc,CAAC,GAAG,oBAAmB,GAAG,EAAC,CAAC;QAEpF,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,EAAE;YACjD,IAAI,CAAC,CAAC,QAAQ,IAAI,iBAAiB,CAAC,EAAE;;gBAGlC,OAAO;aACV;YAED,IAAI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxD,OAAO,CAAC,IAAI,CAAC,gCAAgC,EAAE,iBAAiB,CAAC,IAAI,EAAE,0BAA0B,EAAE,iBAAiB,CAAC,CAAC;gBAEtH,OAAO;aACV;YAED,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;SACvC,CAAC,CAAC;;;;;;IAGA,oBAAoB,CAAC,eAAuB;QAC/C,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,aAAa,GAAG,eAAe,CAAC,CAAC;QAEnG,OAAO,IAAI,CAAC;;;;;;;;IAGT,uBAAuB,CAAC,GAAW,EAAE,OAAsB,EAAE,UAA8B;;QAC9F,IAAI,OAAO,GAAG,IAAI,OAAO,EAAsB,CAAC;QAEhD,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,aAAa,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,SAAS,CAChF,eAAe,CAAC,EAAE;;YAEd,IAAI,IAAI,CAAC,4CAA4C,CAAC,eAAe,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE;gBACrF,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC;gBAC5B,UAAU,CAAC,iBAAiB,GAAG,eAAe,CAAC,gBAAgB,CAAC;gBAChE,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzB,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAEnB,OAAO;aACV;;YAED,IAAI,QAAQ,GAAG,IAAI,CAAC,2CAA2C,CAAC,eAAe,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;YACtG,QAAQ;iBACH,IAAI,CAAC,GAAG,EAAE;;gBAEP,IAAI,UAAU,CAAC,MAAM,KAAK,KAAK,EAAE;oBAC7B,OAAO,CAAC,IAAI,CAAC,0DAA0D,EAAE,UAAU,CAAC,CAAC;oBACrF,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;iBAC/E;gBACD,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC;gBAC5B,UAAU,CAAC,iBAAiB,GAAG,eAAe,CAAC,gBAAgB,CAAC;gBAChE,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzB,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;aACxC,CAAC;iBACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SACzC,EACD,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAC5B,CAAC;QAEF,OAAO,OAAO,CAAC;;;;;;;IAGX,4CAA4C,CAAC,aAAmC,EAAE,UAA8B;;QACpH,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,KAAK,IAAI,YAAY,IAAI,aAAa,EAAE;;YACpC,IAAI,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;YACxD,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACjB,MAAM,GAAG,KAAK,CAAC;gBACf,MAAM;aACT;YACD,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;SACrC;QAED,OAAO,MAAM,CAAC;;;;;;IAGV,qBAAqB,CAAC,YAA2B;;QACrD,IAAI,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;QACtE,IAAI,QAAQ,GAAG,WAAW,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;QAEnF,OAAO,QAAQ,CAAC;;;;;;;;IAGN,2CAA2C,CACrD,cAA+B,EAC/B,OAAsB,EACtB,UAA8B;;;YAE9B,IAAI,OAAO,GAAG,IAAI,OAAO,CACrB,CAAC,OAA8B,EAAE,MAA4B,EAAQ,EAAE;;gBACnE,IAAI,eAAe,GAA2B,EAAE,CAAC;;gBAGjD,IAAI,mBAAmB,GAAkB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;;oBAC5E,IAAI,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;oBACtE,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;oBAEvG,OAAO,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,YAAY,CAAC,EAAE,CAAC;iBACxE,CAAC,CAAC;;gBAGH,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC;qBAC1E,IAAI,CAAC,oBAAoB,CAAC,EAAE;;oBACzB,IAAI,gBAAgB,GAA2B,EAAE,CAAC;oBAClD,KAAK,IAAI,GAAG,IAAI,oBAAoB,EAAE;;wBAClC,IAAI,aAAa,GAAG,oBAAoB,CAAC,GAAG,CAAC,CAAC;wBAC9C,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;;wBAGhE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,EAAE;4BACnC,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;yBACvG,CAAC,CAAC;wBAEH,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,UAAU,GAAG,aAAa,CAAC,gBAAgB,CAAC;qBACjF;;oBAGD,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE;wBAC/B,IAAI,cAAc,CAAC,IAAI,EAAE;4BACrB,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC;yBACvD;wBAED,KAAK,IAAI,YAAY,IAAI,cAAc,CAAC,IAAI,EAAE;;4BAC1C,IAAI,QAAQ,GAAa,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;4BAC1D,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;gCAC1C,SAAS;6BACZ;4BACD,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;yBAClC;wBAED,OAAO,CAAC,IAAI,CAAC,CAAC;qBACjB;yBAAM;;wBAEH,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;6BACxB,IAAI,CAAC,QAAQ,CAAC,EAAE;4BACb,IAAI,cAAc,CAAC,IAAI,EAAE;gCACrB,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC;6BACvD;4BAED,KAAK,IAAI,YAAY,IAAI,cAAc,CAAC,IAAI,EAAE;;gCAC1C,IAAI,QAAQ,GAAa,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;gCAC1D,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;6BAClC;4BAED,OAAO,CAAC,IAAI,CAAC,CAAC;yBACjB,CAAC;6BACD,KAAK,CAAC,MAAM,CAAC,EAAE;4BACZ,MAAM,CAAC,MAAM,CAAC,CAAC;yBAClB,CAAC,CAAC;qBACV;iBACJ,CAAC;qBACD,KAAK,CAAC,GAAG,CAAC,EAAE;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf,CAAC,CAAC;aACV,CACJ,CAAC;YAEF,OAAO,OAAO,CAAC;;;;;;;;;IAGX,yBAAyB,CAAC,QAAkB,EAAE,cAAsB,EAAE,gBAA4B;QACtG,IAAI,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;;YAC9B,IAAI,6BAA6B,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;YAC9D,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACjF,IAAI,YAAY,YAAY,gBAAgB,EAAE;gBAC1C,OAAO,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;aAChH;iBAAM,IAAI,YAAY,YAAY,kBAAkB,EAAE;gBACnD,KAAK,IAAI,gBAAgB,IAAI,YAAY,CAAC,IAAI,EAAE;oBAC5C,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,EAAE,6BAA6B,CAAC,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;iBACxG;gBAED,OAAO;aACV;SACJ;QAED,IAAI,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,YAAY,gBAAgB,EAAE;;YAEpE,IAAI,gBAAgB,qBAAkB,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,IAAI,EAAC;YAClF,IAAI,CAAC,CAAC,YAAY,IAAI,gBAAgB,CAAC,EAAE;;gBAErC,IAAI,gBAAgB,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;gBACpE,IAAI,gBAAgB,CAAC,MAAM,EAAE;;oBAEzB,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;iBAC7D;qBAAM,IAAI,SAAS,EAAE,EAAE;oBACpB,OAAO,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;iBACrE;gBACD,QAAQ,CAAC,eAAe,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;aAC9D;SACJ;;;CAGR","sourcesContent":["import { IObjectsById } from '../interfaces';\nimport { IDataResource } from '../interfaces/data-resource';\nimport { IDataCollection } from '../interfaces/data-collection';\nimport { Core } from '../core';\nimport { Base } from './base';\nimport { Resource } from '../resource';\nimport { Converter } from './converter';\nimport { DocumentCollection } from '../document-collection';\nimport { Observable, Subject } from 'rxjs';\nimport { Page } from './page';\nimport { DocumentResource } from '../document-resource';\nimport { isDevMode } from '@angular/core';\n\nexport class CacheStore {\n    public async getResource(resource: Resource, include: Array<string> = []): Promise<object> {\n        let mypromise: Promise<object> = new Promise(\n            (resolve, reject): void => {\n                Core.injectedServices.JsonapiStoreService.getDataObject(resource.type, resource.id).subscribe(\n                    success => {\n                        resource.fill({ data: success });\n\n                        // include some times is a collection :S\n                        let include_promises: Array<Promise<object>> = [];\n                        for (let resource_alias of include) {\n                            this.fillRelationshipFromStore(resource, resource_alias, include_promises);\n                        }\n\n                        // resource.lastupdate = success._lastupdate_time;\n\n                        // no debo esperar a que se resuelvan los include\n                        if (include_promises.length === 0) {\n                            resolve(success);\n                        } else {\n                            // esperamos las promesas de los include antes de dar el resolve\n                            Promise.all(include_promises)\n                                .then(success3 => {\n                                    resolve(success3);\n                                })\n                                .catch(error3 => {\n                                    reject(error3);\n                                });\n                        }\n                    },\n                    () => {\n                        reject();\n                    }\n                );\n            }\n        );\n\n        return mypromise;\n    }\n\n    public setResource(resource: Resource) {\n        Core.injectedServices.JsonapiStoreService.saveResource(resource.type, resource.id, resource.toObject().data);\n    }\n\n    public setCollection(url: string, collection: DocumentCollection, include: Array<string>): void {\n        let tmp: IDataCollection = { data: [], page: new Page() };\n        let resources_for_save: IObjectsById<Resource> = {};\n        for (let resource of collection.data) {\n            this.setResource(resource);\n            tmp.data.push({ id: resource.id, type: resource.type });\n\n            for (let resource_type_alias of include) {\n                if ('id' in resource.relationships[resource_type_alias].data) {\n                    // hasOne\n                    let ress = <Resource>resource.relationships[resource_type_alias].data;\n                    resources_for_save[resource_type_alias + ress.id] = ress;\n                } else {\n                    // hasMany\n                    let collection2 = <Array<Resource>>resource.relationships[resource_type_alias].data;\n                    for (let inc_resource of collection2) {\n                        resources_for_save[resource_type_alias + inc_resource.id] = inc_resource;\n                    }\n                }\n            }\n        }\n\n        tmp.page = collection.page;\n        Core.injectedServices.JsonapiStoreService.saveCollection(url, <IDataCollection>tmp);\n\n        Base.forEach(resources_for_save, resource_for_save => {\n            if (!('is_new' in resource_for_save)) {\n                // console.warn('No se pudo guardar en la cache', resource_for_save.type, 'por no se ser Resource.', resource_for_save);\n\n                return;\n            }\n\n            if (Object.keys(resource_for_save.attributes).length === 0) {\n                console.warn('No se pudo guardar en la cache', resource_for_save.type, 'por no tener attributes.', resource_for_save);\n\n                return;\n            }\n\n            this.setResource(resource_for_save);\n        });\n    }\n\n    public deprecateCollections(path_start_with: string): boolean {\n        Core.injectedServices.JsonapiStoreService.deprecateObjectsWithKey('collection.' + path_start_with);\n\n        return true;\n    }\n\n    public fillCollectionFromStore(url: string, include: Array<string>, collection: DocumentCollection): Observable<DocumentCollection> {\n        let subject = new Subject<DocumentCollection>();\n\n        Core.injectedServices.JsonapiStoreService.getDataObject('collection', url).subscribe(\n            data_collection => {\n                // build collection from store and resources from memory\n                if (this.fillCollectionWithArrrayAndResourcesOnMemory(data_collection.data, collection)) {\n                    collection.source = 'store'; // collection from storeservice, resources from memory\n                    collection.cache_last_update = data_collection._lastupdate_time;\n                    subject.next(collection);\n                    subject.complete();\n\n                    return;\n                }\n\n                let promise2 = this.fillCollectionWithArrrayAndResourcesOnStore(data_collection, include, collection);\n                promise2\n                    .then(() => {\n                        // just for precaution, we not rewrite server data\n                        if (collection.source !== 'new') {\n                            console.warn('ts-angular-json: esto no debería pasar. buscar eEa2ASd2#', collection);\n                            throw new Error('ts-angular-json: esto no debería pasar. buscar eEa2ASd2#');\n                        }\n                        collection.source = 'store'; // collection and resources from storeservice\n                        collection.cache_last_update = data_collection._lastupdate_time;\n                        subject.next(collection);\n                        setTimeout(() => subject.complete());\n                    })\n                    .catch(err => subject.error(err));\n            },\n            err => subject.error(err)\n        );\n\n        return subject;\n    }\n\n    private fillCollectionWithArrrayAndResourcesOnMemory(dataresources: Array<IDataResource>, collection: DocumentCollection): boolean {\n        let all_ok = true;\n        for (let dataresource of dataresources) {\n            let resource = this.getResourceFromMemory(dataresource);\n            if (resource.is_new) {\n                all_ok = false;\n                break;\n            }\n            collection.replaceOrAdd(resource);\n        }\n\n        return all_ok;\n    }\n\n    private getResourceFromMemory(dataresource: IDataResource): Resource {\n        let cachememory = Converter.getService(dataresource.type).cachememory;\n        let resource = cachememory.getOrCreateResource(dataresource.type, dataresource.id);\n\n        return resource;\n    }\n\n    private async fillCollectionWithArrrayAndResourcesOnStore(\n        datacollection: IDataCollection,\n        include: Array<string>,\n        collection: DocumentCollection\n    ): Promise<void> {\n        let promise = new Promise(\n            (resolve: (value: void) => void, reject: (value: any) => void): void => {\n                let resources_by_id: IObjectsById<Resource> = {};\n\n                // get collection from store\n                let required_store_keys: Array<string> = datacollection.data.map(dataresource => {\n                    let cachememory = Converter.getService(dataresource.type).cachememory;\n                    resources_by_id[dataresource.id] = cachememory.getOrCreateResource(dataresource.type, dataresource.id);\n\n                    return resources_by_id[dataresource.id].type + '.' + dataresource.id;\n                });\n\n                // get resources for collection fill\n                Core.injectedServices.JsonapiStoreService.getDataResources(required_store_keys)\n                    .then(store_data_resources => {\n                        let include_promises: Array<Promise<object>> = [];\n                        for (let key in store_data_resources) {\n                            let data_resource = store_data_resources[key];\n                            resources_by_id[data_resource.id].fill({ data: data_resource });\n\n                            // include some times is a collection :S\n                            Base.forEach(include, resource_alias => {\n                                this.fillRelationshipFromStore(resources_by_id[data_resource.id], resource_alias, include_promises);\n                            });\n\n                            resources_by_id[data_resource.id].lastupdate = data_resource._lastupdate_time;\n                        }\n\n                        // no debo esperar a que se resuelvan los include\n                        if (include_promises.length === 0) {\n                            if (datacollection.page) {\n                                collection.page.number = datacollection.page.number;\n                            }\n\n                            for (let dataresource of datacollection.data) {\n                                let resource: Resource = resources_by_id[dataresource.id];\n                                if (collection.data.indexOf(resource) !== -1) {\n                                    continue;\n                                }\n                                collection.data.push(resource);\n                            }\n\n                            resolve(null);\n                        } else {\n                            // esperamos las promesas de los include antes de dar el resolve\n                            Promise.all(include_promises)\n                                .then(success3 => {\n                                    if (datacollection.page) {\n                                        collection.page.number = datacollection.page.number;\n                                    }\n\n                                    for (let dataresource of datacollection.data) {\n                                        let resource: Resource = resources_by_id[dataresource.id];\n                                        collection.data.push(resource);\n                                    }\n\n                                    resolve(null);\n                                })\n                                .catch(error3 => {\n                                    reject(error3);\n                                });\n                        }\n                    })\n                    .catch(err => {\n                        reject(err);\n                    });\n            }\n        );\n\n        return promise;\n    }\n\n    private fillRelationshipFromStore(resource: Resource, resource_alias: string, include_promises: Array<any>) {\n        if (resource_alias.includes('.')) {\n            let included_resource_alias_parts = resource_alias.split('.');\n            let datadocument = resource.relationships[included_resource_alias_parts[0]].data;\n            if (datadocument instanceof DocumentResource) {\n                return this.fillRelationshipFromStore(datadocument.data, included_resource_alias_parts[1], include_promises);\n            } else if (datadocument instanceof DocumentCollection) {\n                for (let related_resource of datadocument.data) {\n                    this.fillRelationshipFromStore(related_resource, included_resource_alias_parts[1], include_promises);\n                }\n\n                return;\n            }\n        }\n\n        if (resource.relationships[resource_alias] instanceof DocumentResource) {\n            // hasOne\n            let related_resource = <IDataResource>resource.relationships[resource_alias].data;\n            if (!('attributes' in related_resource)) {\n                // no está cargado aún\n                let builded_resource = this.getResourceFromMemory(related_resource);\n                if (builded_resource.is_new) {\n                    // no está en memoria, la pedimos a store\n                    include_promises.push(this.getResource(builded_resource));\n                } else if (isDevMode()) {\n                    console.warn('ts-angular-json: esto no debería pasar #isdjf2l1a');\n                }\n                resource.addRelationship(builded_resource, resource_alias);\n            }\n        }\n        // else @todo hasMany??\n    }\n}\n"]}